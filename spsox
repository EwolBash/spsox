#!/bin/bash
# spsox is a simple bash script that creates spectrograms from flac files.
# Made by Ewol.
#
# This script is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This script is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this script. If not, see <https://www.gnu.org/licenses/>.

# Script name
script_name=$(basename "$0")

# Default configuration
default_threads=$(sysctl -n hw.ncpu 2>/dev/null || nproc 2>/dev/null || echo 1)  # Cross-platform CPU core count
default_start_time="1:00"  # Default start time for zoomed spectrogram
default_duration="0:02"    # Default duration for zoomed spectrogram
log_file="/tmp/spsox_$(date +%Y%m%d_%H%M%S).log"  # Timestamped log file

# Define color codes for output
GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Check if log file is writable
if ! touch "$log_file" &>/dev/null; then
    echo -e "${RED}Error: Cannot write to '$log_file'.${NC}"
    exit 1
fi

# Function to log messages with timestamps
log_message() {
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1" >> "$log_file"
}

# Check if 'sox' is installed
if ! command -v sox &>/dev/null; then
    log_message "Error: 'sox' not installed."
    echo -e "${RED}Error: 'sox' not installed.${NC}"
    exit 1
fi

# Helper function to check if a value is a number
is_number() { [[ "$1" =~ ^[0-9]+$ ]]; }

# Helper function to validate time format (HH:MM:SS or MM:SS)
is_valid_time() {
    [[ "$1" =~ ^([0-9]{1,2}:)?[0-9]{1,2}:[0-9]{2}$ ]] || return 1
    local h=${1%%:*}
    local m=${1#*:}
    m=${m%:}
    local s=${1##*:}
    [[ "$h" -le 23 && "$m" -le 59 && "$s" -le 59 ]]
}

# Helper function to convert time (HH:MM:SS or MM:SS) to seconds
time_to_seconds() {
    local t="$1"
    local h=0
    local m=0
    local s=0
    IFS=':' read -r p1 p2 p3 <<< "$t"
    if [[ -n "$p3" ]]; then
        h=${p1:-0}
        m=${p2:-0}
        s=${p3:-0}
    else
        m=${p1:-0}
        s=${p2:-0}
    fi
    echo $((10#$h * 3600 + 10#$m * 60 + 10#$s))
}

# Helper function to convert seconds to HH:MM:SS or MM:SS
seconds_to_time() {
    local ts=$1
    local h=$((ts / 3600))
    local m=$(((ts % 3600) / 60))
    local s=$((ts % 60))
    if (( h > 0 )); then
        printf "%02d:%02d:%02d" "$h" "$m" "$s"
    else
        printf "%02d:%02d" "$m" "$s"
    fi
}

# Function to validate X-axis resolution
validate_x_axis() {
    local x="$1"
    if ! is_number "$x" || (( x < 100 || x > 10000 )); then
        echo "Error: X-axis resolution must be between 100 and 10000."
        exit 1
    fi
}

# Function to validate Y-axis resolution
validate_y_axis() {
    local y="$1"
    if ! is_number "$y" || (( y < 100 || y > 32768 )); then
        echo "Error: Y-axis resolution must be between 100 and 32768."
        exit 1
    fi
}

# Function to validate Z-axis resolution
validate_z_axis() {
    local z="$1"
    if ! is_number "$z" || (( z < 1 || z > 240 )); then
        echo "Error: Z-axis resolution must be between 1 and 240."
        exit 1
    fi
}

# Function to display help
show_help() {
    echo "Usage: $script_name [options] [input] [threads] [start_time] [duration]"
    echo ""
    echo "Options:"
    echo "  -r, --recursive       Process .flac files in the specified directory and all subdirectories."
    echo "  -h, --help            Display this help message and exit."
    echo "  -v, --version         Display the script version and exit."
    echo "  -f, --force           Overwrite existing spectrogram files."
    echo "  -q, --quiet           Suppress non-error output."
    echo "  -x, --x-axis          Set the X-axis resolution for the spectrogram (default: 500, range: 100-10000)."
    echo "  -y, --y-axis          Set the Y-axis resolution for the spectrogram (default: 1025, range: 100-32768)."
    echo "  -z, --z-axis          Set the Z-axis resolution for the spectrogram (default: 120, range: 1-240)."
    echo ""
    echo "Arguments:"
    echo "  input                 Either a directory containing .flac files or a single .flac file."
    echo "                        If omitted, defaults to the current directory."
    echo "  threads               Number of parallel threads to use (default: $default_threads)."
    echo "  start_time            Start time for the zoomed spectrogram (default: $default_start_time)."
    echo "  duration              Duration of the zoomed spectrogram (default: $default_duration)."
    echo ""
    echo "Examples:"
    echo "  Default Usage:"
    echo "    $script_name        Process .flac files in the current directory with default settings."
    echo ""
    echo "  Process a Single File:"
    echo "    $script_name /path/to/file.flac 12 0:20 0:05"
    echo "                        Process a single .flac file with 12 threads, starting at 0:20,"
    echo "                        and spanning 5 seconds."
    echo ""
    echo "  Process a Directory:"
    echo "    $script_name /path/to/directory 8 3:00 0:05"
    echo "                        Process all .flac files in the specified directory with 8 threads,"
    echo "                        starting at 3:00 and spanning 5 seconds."
    echo ""
    echo "  Recursive Processing:"
    echo "    $script_name -r /path/to/directory 4"
    echo "                        Process all .flac files in the directory and its subdirectories"
    echo "                        with 4 threads."
    echo ""
    echo "  Custom Thread Count Only:"
    echo "    $script_name 6      Process .flac files in the current directory with 6 threads."
    echo ""
    echo "Notes:"
    echo "  - The 'start_time' and 'duration' arguments must be in HH:MM:SS or MM:SS format."
    echo "  - If 'start_time + duration' exceeds the file length, the duration is adjusted automatically."
    echo "  - Logs are written to '$log_file'."
    echo "  - Requires 'sox' to be installed. Install it using your package manager (e.g., apt, pacman)."
}

# Parse options
recursive=false
force=false
quiet=false
x_axis=500
y_axis=1025
z_axis=120
while [[ "$1" == -* ]]; do
    case "$1" in
        -r|--recursive) recursive=true; shift ;;
        -f|--force) force=true; shift ;;
        -q|--quiet) quiet=true; shift ;;
        -x|--x-axis)
            validate_x_axis "$2"
            x_axis="$2"
            shift 2
            ;;
        -y|--y-axis)
            validate_y_axis "$2"
            y_axis="$2"
            shift 2
            ;;
        -z|--z-axis)
            validate_z_axis "$2"
            z_axis="$2"
            shift 2
            ;;
        -h|--help) show_help; exit 0 ;;
        -v|--version) echo "$script_name version 0.4"; exit 0 ;;
        *) echo "Error: Unknown option '$1'."; exit 1 ;;
    esac
done

# Assign arguments after parsing options
input_dir="$(pwd)"  # Default to current directory
threads="$default_threads"
start_time="$default_start_time"
duration="$default_duration"

if [[ -z "$1" ]]; then
    # No arguments provided: Default to current directory
    :
elif [[ -f "$1" ]]; then
    # Input is a single FLAC file
    single_file="$1"
    threads="${2:-$default_threads}"  # Use second argument as thread count, or default
    start_time="${3:-$default_start_time}"  # Use third argument as start time, or default
    duration="${4:-$default_duration}"     # Use fourth argument as duration, or default
elif [[ -d "$1" ]]; then
    # Input is a directory
    input_dir="$1"
    threads="${2:-$default_threads}"  # Use second argument as thread count, or default
    start_time="${3:-$default_start_time}"  # Use third argument as start time, or default
    duration="${4:-$default_duration}"     # Use fourth argument as duration, or default
elif is_number "$1"; then
    # First argument is a number (interpreted as thread count)
    threads="$1"
    start_time="${2:-$default_start_time}"  # Use second argument as start time, or default
    duration="${3:-$default_duration}"     # Use third argument as duration, or default
elif is_valid_time "$1" && is_valid_time "$2"; then
    # First two arguments are valid times (start_time and duration)
    start_time="$1"
    duration="$2"
else
    # Invalid input
    echo "Error: '$1' is neither a valid file, directory, thread count, nor time value. Use -h for help."
    exit 1
fi

# Validate input directory
if [[ ! -d "$input_dir" ]]; then
    echo "Error: Input directory '$input_dir' does not exist."
    exit 1
fi

# Validate thread count
if ! is_number "$threads"; then
    echo "Error: Invalid thread count '$threads'. Must be a positive integer."
    exit 1
fi

# Validate start time format
if ! is_valid_time "$start_time"; then
    echo "Error: Invalid start time format '$start_time'. Use HH:MM:SS or MM:SS."
    exit 1
fi

# Validate duration format
if ! is_valid_time "$duration"; then
    echo "Error: Invalid duration format '$duration'. Use HH:MM:SS or MM:SS."
    exit 1
fi

# Convert start_time and duration to seconds
start_seconds=$(time_to_seconds "$start_time")
duration_seconds=$(time_to_seconds "$duration")

# Variables to track progress and summary
total_files=$(find "$input_dir" -type f -name "*.flac" | wc -l)
specs_dir="$input_dir/specs"
mkdir -p "$specs_dir" || { log_message "Error: Failed to create '$specs_dir'"; echo -e "${RED}Error: Failed to create '$specs_dir'${NC}"; exit 1; }

# Temporary file to store counters
counters_file=$(mktemp)
echo "generated=0" > "$counters_file"
echo "skipped=0" >> "$counters_file"
echo "failed=0" >> "$counters_file"
echo "adjusted=0" >> "$counters_file"

# Function to generate spectrograms for a single FLAC file
generate_spectrograms() {
    local file="$1"
    if [[ ! -f "$file" ]]; then
        log_message "Error: File '$file' not found."
        echo "failed=1" >> "$counters_file"
        return
    fi

    local base_name=$(basename "$file")
    local zoomed_file="$specs_dir/${base_name%.*}.zoomed.png"
    local full_file="$specs_dir/${base_name%.*}.full.png"

    # Skip if files exist and force is not enabled
    if [[ -f "$zoomed_file" && -f "$full_file" && "$force" != true ]]; then
        log_message "Skipping '$file': Spectrograms already exist."
        echo "skipped=1" >> "$counters_file"
        return
    fi

    local file_duration=$(soxi -D "$file" 2>/dev/null | cut -d. -f1)
    if [[ -z "$file_duration" ]]; then
        log_message "Error: Failed to get duration for '$file'."
        echo "failed=1" >> "$counters_file"
        return
    fi

    local adj_start_seconds=$start_seconds
    local adj_duration_seconds=$duration_seconds

    # Adjust start time if it exceeds the file duration
    if (( adj_start_seconds >= file_duration )); then
        adj_start_seconds=$((file_duration - adj_duration_seconds))
        if (( adj_start_seconds < 0 )); then
            adj_start_seconds=0
        fi
        log_message "Adjusted start time for '$file' to $(seconds_to_time "$adj_start_seconds") due to file duration."
        echo "adjusted=1" >> "$counters_file"
    fi

    # Adjust duration if start_time + duration exceeds the file duration
    if (( adj_start_seconds + adj_duration_seconds > file_duration )); then
        adj_duration_seconds=$((file_duration - adj_start_seconds))
        log_message "Adjusted duration for '$file' to $(seconds_to_time "$adj_duration_seconds") due to file duration."
        echo "adjusted=1" >> "$counters_file"
    fi

    local adj_start_time=$(seconds_to_time "$adj_start_seconds")
    local adj_duration=$(seconds_to_time "$adj_duration_seconds")

    if sox --multi-threaded --buffer 128000 "$file" -n \
        remix 1 spectrogram -t "${base_name%.*}" -X "$x_axis" -y "$y_axis" -z "$z_axis" -w Kaiser -S "$adj_start_time" -d "$adj_duration" -o "$zoomed_file" \
        remix 1 spectrogram -t "${base_name%.*}" -x 3000 -y 513 -z 120 -w Kaiser -o "$full_file" 2>>"$log_file"; then
        log_message "Success: Generated spectrograms for '$file'."
        echo "generated=1" >> "$counters_file"
    else
        log_message "Error: Failed to generate spectrograms for '$file'."
        echo "failed=1" >> "$counters_file"
    fi
}
export -f generate_spectrograms

# Function to display a progress bar
progress_bar() {
    local current=$1
    local total=$2
    local width=50
    local percent=$((current * 100 / total))
    local filled=$((current * width / total))
    local empty=$((width - filled))
    printf "\r["
    printf "%${filled}s" | tr ' ' '='
    printf "%${empty}s" | tr ' ' ' '
    printf "] %3d%%" "$percent"
}

# Trap to clean up background jobs on script exit or interrupt
trap 'kill $(jobs -p) 2>/dev/null; echo "Cleaning up..."' EXIT

# Start timing
start_time=$(date +%s)

# Preload files to cache
log_message "Preloading files to cache..."
[[ "$quiet" != "true" ]] && echo -e "${GREEN}Preloading files...${NC}"
if $recursive; then
    find "$input_dir" -type f -name "*.flac" -exec cat {} >/dev/null 2>&1 \;
else
    find "$input_dir" -maxdepth 1 -type f -name "*.flac" -exec cat {} >/dev/null 2>&1 \;
fi

# Process files
[[ "$quiet" != "true" ]] && echo -e "${GREEN}Processing...${NC}"
if [[ -n "$single_file" ]]; then
    generate_spectrograms "$single_file"
else
    if $recursive; then
        find_command="find \"$input_dir\" -type f -name \"*.flac\" -print0"
    else
        find_command="find \"$input_dir\" -maxdepth 1 -type f -name \"*.flac\" -print0"
    fi

    declare -A pids
    processed_files=0
    while IFS= read -r -d '' file; do
        while (( ${#pids[@]} >= threads )); do
            for pid in "${!pids[@]}"; do
                if ! kill -0 "$pid" 2>/dev/null; then
                    wait "$pid"
                    unset "pids[$pid]"
                    processed_files=$((processed_files + 1))
                    progress_bar "$processed_files" "$total_files"
                fi
            done
        done
        generate_spectrograms "$file" &
        pids[$!]="running"
    done < <(eval "$find_command")

    # Wait for all remaining background jobs to finish
    for pid in "${!pids[@]}"; do
        wait "$pid"
        processed_files=$((processed_files + 1))
        progress_bar "$processed_files" "$total_files"
    done
fi

# End timing
end_time=$(date +%s)
total_time=$((end_time - start_time))

# Aggregate counters from the temporary file
generated=$(grep "generated=" "$counters_file" | cut -d= -f2 | paste -sd+ | bc)
skipped=$(grep "skipped=" "$counters_file" | cut -d= -f2 | paste -sd+ | bc)
failed=$(grep "failed=" "$counters_file" | cut -d= -f2 | paste -sd+ | bc)
adjusted=$(grep "adjusted=" "$counters_file" | cut -d= -f2 | paste -sd+ | bc)

# Post-run summary
echo ""
echo "Processing Summary:"
echo "-------------------"
echo "Total Files: $total_files"
echo "Spectrograms Generated: $generated"
echo "Skipped: $skipped"
echo "Failed: $failed"
echo "Adjusted: $adjusted"
echo "Total Time: ${total_time} seconds."
echo "Check '$log_file' for errors."

# Clean up temporary file
rm -f "$counters_file"
